// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.app == null) {
    window.app = {
      currentFile: 'lesson32.zip'
    };
  }

  app.File = (function() {
    File.prototype.name = '';

    File.prototype.path = '';

    File.prototype.data = null;

    File.prototype.isDirectory = false;

    function File(name, path, data, isDirectory) {
      this.name = name;
      this.path = path;
      this.data = data;
      this.isDirectory = isDirectory;
      this.files = {};
    }

    return File;

  })();

  app.Browser = (function() {
    function Browser(page) {
      var _this = this;
      this.page = page;
      this.addItem = __bind(this.addItem, this);
      this.root = new app.File('', '', null, true);
      page.bind('pageshow', function() {
        return _this.enumerate();
      });
    }

    Browser.prototype.addFile = function(directory, filename, data) {
      var directoryName, slashPosition;
      if (filename === '') {
        return;
      }
      slashPosition = filename.indexOf('/');
      if (slashPosition !== -1) {
        directoryName = filename.substr(0, slashPosition);
        filename = filename.substr(slashPosition + 1);
        if (!directory.files[directoryName]) {
          directory.files[directoryName] = new app.File(directoryName, directory.path + '/' + directoryName, data, true);
        }
        this.addFile(directory.files[directoryName], filename, data);
        return;
      }
      return directory.files[filename] = new app.File(filename, directory.path + '/' + filename, data, false);
    };

    Browser.prototype.addItem = function(name, path, data, isDir) {
      var element,
        _this = this;
      element = $('<li>').html("<a>" + name + "</a>");
      if (isDir) {
        element.bind('vclick', function() {
          return _this.showDirectory(path);
        });
      }
      this.page.find('ul').append(element).listview('refresh');
      return element;
    };

    Browser.prototype.showDirectory = function(dirname) {
      var directory, file, part, _, _i, _len, _ref, _ref1;
      directory = this.root;
      if ((dirname != null ? dirname[0] : void 0) === '/') {
        dirname = dirname.slice(1);
      }
      if ((dirname != null ? dirname[dirname.length - 1] : void 0) === '/') {
        dirname = dirname.slice(0, dirname.length - 1);
      }
      if (dirname) {
        _ref = dirname.split('/');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          part = _ref[_i];
          directory = directory.files[part];
        }
      } else {
        dirname = '';
      }
      this.page.find('ul').html('');
      if (dirname !== '') {
        this.addItem('..', '/' + dirname.slice(0, ('/' + dirname).lastIndexOf('/')), {}, true);
      }
      _ref1 = directory.files;
      for (_ in _ref1) {
        file = _ref1[_];
        this.addItem(file.name, file.path, file.data, file.isDirectory);
      }
    };

    return Browser;

  })();

  app.FileBrowser = (function(_super) {
    __extends(FileBrowser, _super);

    function FileBrowser() {
      _ref = FileBrowser.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FileBrowser.prototype.enumerate = function() {
      var browser, cursor, sdcard;
      sdcard = navigator.getDeviceStorage('sdcard');
      cursor = sdcard.enumerate();
      $('.ui-loading').show();
      browser = this;
      return cursor.onsuccess = function() {
        if (!this.result) {
          $('.ui-loading').hide();
          browser.showDirectory();
          return;
        }
        if (this.result.type === 'application/zip') {
          browser.addFile(browser.root, this.result.name, this.result);
        }
        this["continue"]();
      };
    };

    FileBrowser.prototype.addItem = function(name, path, data, isDir) {
      var element;
      element = FileBrowser.__super__.addItem.apply(this, arguments);
      if (!isDir) {
        return element.bind('vclick', function() {
          app.currentFile = path;
          return jQuery.mobile.changePage($('#zipbrowser'));
        });
      }
    };

    return FileBrowser;

  })(app.Browser);

  app.ZipBrowser = (function(_super) {
    __extends(ZipBrowser, _super);

    function ZipBrowser() {
      _ref1 = ZipBrowser.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ZipBrowser.prototype.enumerate = function() {
      var browser, request, sdcard;
      sdcard = navigator.getDeviceStorage('sdcard');
      if (app.currentFile.indexOf('/') === 0) {
        app.currentFile = app.currentFile.slice(1);
      }
      request = sdcard.get(app.currentFile);
      browser = this;
      request.onsuccess = function() {
        return zip.createReader(new zip.BlobReader(this.result), function(reader) {
          return reader.getEntries(function(entries) {
            var entry, _i, _len;
            for (_i = 0, _len = entries.length; _i < _len; _i++) {
              entry = entries[_i];
              browser.addFile(browser.root, entry.filename, entry);
            }
            return browser.showDirectory();
          });
        });
      };
    };

    return ZipBrowser;

  })(app.Browser);

  $(document).bind('pageinit', function() {
    new app.FileBrowser($('#filebrowser'));
    return new app.ZipBrowser($('#zipbrowser'));
  });

}).call(this);

/*
//@ sourceMappingURL=filebrowser.map
*/
